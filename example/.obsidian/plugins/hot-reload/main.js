const{Plugin:e,Notice:t,debounce:s}=require("obsidian"),fs=require("fs"),watchNeeded="darwin"!==window.process.platform&&"win32"!==window.process.platform;module.exports=class a extends e{statCache=new Map;queue=Promise.resolve();run(e,t){return this.queue=this.queue.then(e,t)}reindexPlugins=s(()=>this.run(()=>this.getPluginNames()),500,!0);requestScan=s(()=>this.run(()=>this.checkVersions()),250,!0);onload(){app.workspace.onLayoutReady(async()=>{this.pluginReloaders={},this.inProgress=null,await this.getPluginNames(),this.registerEvent(this.app.vault.on("raw",this.requestScan)),this.watch(this.app.plugins.getPluginFolder()),this.requestScan(),this.addCommand({id:"scan-for-changes",name:"Check plugins for changes and reload them",callback:()=>this.requestScan()})})}watch(e){if(this.app.vault.adapter.watchers.hasOwnProperty(e))return;let t=[this.app.vault.adapter.basePath,e].join("/"),s=fs.lstatSync(t,{throwIfNoEntry:!1});s&&(watchNeeded||s.isSymbolicLink())&&fs.statSync(t).isDirectory()&&this.app.vault.adapter.startWatchPath(e,!1)}async checkVersions(){let e=this.app.plugins.getPluginFolder();for(let t of Object.keys(this.pluginNames))for(let s of["manifest.json","main.js","styles.css",".hotreload"]){let a=`${e}/${t}/${s}`,i=await app.vault.adapter.stat(a);i&&(this.statCache.has(a)&&i.mtime!==this.statCache.get(a).mtime&&this.onFileChange(a),this.statCache.set(a,i))}}async getPluginNames(){let e={},t=new Set;for(let{id:s,dir:a}of Object.values(app.plugins.manifests))this.watch(a),e[a.split("/").pop()]=s,(await this.app.vault.exists(a+"/.git")||await this.app.vault.exists(a+"/.hotreload"))&&t.add(s);this.pluginNames=e,this.enabledPlugins=t}onFileChange(e){if(!e.startsWith(this.app.plugins.getPluginFolder()+"/"))return;let t=e.split("/"),a=t.pop(),i=t.pop();if(1===t.length&&"plugins"===i)return this.watch(e);if(2!=t.length)return;let n=i&&this.pluginNames[i];if("manifest.json"===a||".hotreload"===a||".git"===a||!n)return this.reindexPlugins();if("main.js"!==a&&"styles.css"!==a||!this.enabledPlugins.has(n))return;let l=this.pluginReloaders[n]||(this.pluginReloaders[n]=s(()=>this.run(()=>this.reload(n),console.error),750,!0));l()}async reload(e){let s=app.plugins;if(!s.enabledPlugins.has(e))return;await s.disablePlugin(e),console.debug("disabled",e);let a=localStorage.getItem("debug-plugin");localStorage.setItem("debug-plugin","1");try{await s.enablePlugin(e)}finally{null===a?localStorage.removeItem("debug-plugin"):localStorage.setItem("debug-plugin",a)}console.debug("enabled",e),new t(`Plugin "${e}" has been reloaded`)}};
